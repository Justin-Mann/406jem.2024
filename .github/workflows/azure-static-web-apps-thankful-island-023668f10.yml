name: Azure Static Web Apps CI/CD (Blazor Client)

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened, closed]
    branches:
      - main

env:
  AZURE_FUNCTIONAPP_NAME: 406resumeapi
  AZURE_FUNCTIONAPP_PACKAGE_PATH: ResumeFunctions\published
  CONFIGURATION: Release
  DOTNET_CORE_VERSION: 8.0.x
  WORKING_DIRECTORY: ResumeFunctions
  DOTNET_CORE_VERSION_INPROC: 8.0.x

jobs:
  build_and_deploy_job:
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.action != 'closed')
    runs-on: ubuntu-latest
    name: Build and Deploy Blazor Client Job
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
          lfs: false
      - name: Build And Deploy
        id: builddeploy
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_THANKFUL_ISLAND_023668F10 }}
          repo_token: ${{ secrets.GITHUB_TOKEN }} # Used for Github integrations (i.e. PR comments)
          action: "upload"
          ###### Repository/Build Configurations - These values can be configured to match your app requirements. ######
          # For more information regarding Static Web App workflow configurations, please visit: https://aka.ms/swaworkflowconfig
          app_location: "./BlazorClient" # App source code path
          #api_location: "./Api" # Api source code path - optional
          output_location: "wwwroot" # Built app content directory - optional
          ###### End of Repository/Build Configurations ######


  # build:
  #   runs-on: windows-latest
  #   steps:
  #   - uses: actions/checkout@v4
  #   - name: Setup .NET SDK
  #     uses: actions/setup-dotnet@v3
  #     with:
  #       dotnet-version: ${{ env.DOTNET_CORE_VERSION }}
  #   - name: Setup .NET Core
  #     uses: actions/setup-dotnet@v1
  #     with:
  #       dotnet-version: ${{ env.DOTNET_CORE_VERSION }}
  #       include-prerelease: True
  #   - name: Restore
  #     run: dotnet restore "${{ env.WORKING_DIRECTORY }}"
  #   - name: Build
  #     run: dotnet build "${{ env.WORKING_DIRECTORY }}" --configuration ${{ env.CONFIGURATION }} --no-restore
  #   - name: Publish
  #     run: dotnet publish "${{ env.WORKING_DIRECTORY }}" --configuration ${{ env.CONFIGURATION }} --no-build --output "${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}"
  #   - name: Publish Artifacts
  #     uses: actions/upload-artifact@v4
  #     with:
  #       name: functionapp
  #       path: ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}
  # deploy:
  #   runs-on: windows-latest
  #   needs: build
  #   steps:
  #   - name: Download artifact from build job
  #     uses: actions/download-artifact@v4
  #     with:
  #       name: functionapp
  #       path: ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}
  #   - name: Deploy to Azure Function App
  #     uses: Azure/functions-action@v1
  #     with:
  #       app-name: ${{ env.AZURE_FUNCTIONAPP_NAME }}
  #       publish-profile: ${{ secrets.AZURE_FUNCTIONAPP_PUBLISH_PROFILE }}
  #       package: ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}
  #       scm-do-build-during-deployment: false
  #       enable-oryx-build: false



    # - name: Azure Functions Action
    #   uses: Azure/functions-action@v1.5.1
    #   with:
    #     # Name of the Azure Function App
    #     app-name: '406resumeapi'
    #     # Path to package or folder. *.zip or a folder to deploy
    #     package: './Api'
    #     publish-profile: ${{ secrets.AZURE_FUNCTIONAPP_PUBLISH_PROFILE }}
    #     # Function app slot to be deploy to
    #     #slot-name: # optional
    #     # Automatically look up Java function app artifact from pom.xml (default: 'false'). When this is set to 'true', 'package' should point to the folder of host.json.
    #     #respect-pom-xml: # optional, default is false
    #     # Remove unwanted files defined in .funcignore file (default: 'false'). When this is set to 'true', 'package' should point to the folder of host.json.
    #     #respect-funcignore: # optional, default is false
    #     # Enable build action from Kudu when the package is deployed onto the function app. This will temporarily change the SCM_DO_BUILD_DURING_DEPLOYMENT setting for this deployment. To bypass this and use the existing settings from your function app, please set this to an empty string ''. To enable remote build for your project, please set this and 'enable-oryx-build' both to 'true'. By default, GitHub Action respects the packages resolved in GitHub workflow, disabling the redundant build action from Kudu endpoint. (default: 'false').
    #     scm-do-build-during-deployment: true # optional, default is false
    #     # Use Oryx Build from Kudu when the package is deployed onto the function app. (Linux functions only). This will temporarily change the ENABLE_ORYX_BUILD setting from this deployment. To bypass this and use the existing settings from your function app, please set this to an empty string ''. To enable remote build for your project, please set this and 'scm-do-build-during-deployment' both to 'true'. By default, GitHub Action respects the packages resolved in GitHub workflow, disabling the redundant build action from Kudu endpoint. (default: 'false').
    #     enable-oryx-build: true # optional, default is false



  close_pull_request_job:
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    runs-on: ubuntu-latest
    name: Close Pull Request Job
    steps:
      - name: Close Pull Request
        id: closepullrequest
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_THANKFUL_ISLAND_023668F10 }}
          action: "close"
